Exécuter la classe Except1 et expliquer la raison de son comportement.
Le code est sur la zone moodle.

main : debut
main : appel de methodeA
  methodeA : debut
  methodeA : appel de methodeB
    methodeB : debut
    methodeB : tente d’acceder a args[99]
    methodeB : capture : java.lang.ArrayIndexOutOfBoundsException: Index 99 out of bounds for length 0
    methodeB : execute finally
    methodeB : fin
  methodeA : retour de methodeB
  methodeA : execute finally
  methodeA : fin
main : retour de methodeA
main : fin

--> En exécutant le code tel quel, l'exécution capture une exception de type : ArrayIndexOutOfBoundsException.
Cela se déroule dans notre methodeB(String args[]). En effet, nous passons à cette méthode les paramètres avec lesquels
nous avons lancé le main. Dans mon cas, je n'en ai mis aucun.
Rentrons dans le code :
Dans le main, nous rentrons dans la methodeA() grâce à : ex.methodeA(args);
Une fois dedans, nous sommes dans un bloc try.
Nous appelons : this.methodeB(args);
Nous rentrons donc dans la methodeB().
Une fois dedans, nous sommes dans un bloc try.
String s = args[99] étant dans un bloc try, cela signifie que cette partie de code peut renvoyer des exceptions. Le bloc
catch "capture" donc celle-ci (je n'ai pas passé 100 args à mon lanceur) et envois sous la forme de System.out.println("    methodeB : capture : " + e)
l'erreur en question.
L'erreur ayant été catch, nous passons dans le bloc finally de la methodeB() (qui s'exécute indépendamment de résultat du catch).
Une fois cela fait, nous revenons dans notre methodeA(). Cette méthode n'a pas catch d'erreur. Elle descend donc directement
dans son finnaly.

Si nous avions passé 100 args à notre lanceur, une erreur aurait été catch dans notre methodeA() mais pas dans la methdodeB().
Exemple :

main : debut
main : appel de methodeA
  methodeA : debut
  methodeA : appel de methodeB
    methodeB : debut
    methodeB : tente d’acceder a args[99]
    methodeB : a reussi a acceder a args[99]
    methodeB : execute finally
    methodeB : fin
  methodeA : retour de methodeB
  methodeA : capture : java.io.IOException
  methodeA : execute finally
  methodeA : fin
main : retour de methodeA
main : fin
